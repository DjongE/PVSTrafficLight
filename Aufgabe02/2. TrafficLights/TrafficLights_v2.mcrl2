%
% TrafficLights.mcrl2
%
% A specification of a set of four traffic lights at an intersection.
%
% Copyright (c) 2019-2021 HS Emden-Leer
% All Rights Reserved.
%
% @version 1.40 - 08 Apr 2021 - GJV - parameterize starting axis in TrafficLight(), renamed Crossing into Intersection
% @version 1.30 - 16 May 2020 - GJV - drops the need for a four-way synchronization, thereby becoming easier to translate into Go
% @version 1.20 - 24 May 2019 - GJV - further optimatization, but no longer 100% equivalent with initial standard solution
% @version 1.10 - 15 May 2019 - GJV - remove debug information and superfluous specs 
% @version 1.00 - 17 Apr 2019 - GJV - initial version 
%

%
% Definition of data types
%

sort
    CardinalDirection = struct north | east | south | west;   % 4 directions
    Axis = struct nsAxis | ewAxis;                            % 2 axes
    
map
    axis: CardinalDirection -> Axis;

eqn
    axis(north) = nsAxis;
    axis(south) = nsAxis;
    axis(east) = ewAxis;
    axis(west) = ewAxis;

sort
    Colour =  struct red | yellow | green;                    % 3 colours

map
    next : Colour -> Colour;

eqn
    next(red) = green;
    next(green) = yellow;
    next(yellow) = red;
    

% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a TrafficLight
%

act
    show : CardinalDirection # Colour;  % the given traffic light shows the given colour
    %showTrafiic : CardinalDirection # Colour;

proc
    TrafficLight(d : CardinalDirection, startAxis : Axis) =
        % starting axis can continue, other axes have to wait to take over control
        show(d,red).TrafficLight(d,red) % Start Zustand/Farbe anzeigen
    ;

    TrafficLight(d : CardinalDirection, c : Colour) =
        % show light, if it is red, handover control and get it back, otherwise synchronize, finally continue with next colour
        show(d,next(c)).TrafficLight(d,next(c)) % den aktuellen Zustand der Ampel anzeigen und TrafficLight mit naechster Farbe aufrufen
    ;



% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a intersection with four traffic lights
%

act
    recieve : CardinalDirection # Colour;
    intersectionUnsafe : Colour # Colour # Colour # Colour;
    colourSeen : CardinalDirection # Colour;

proc
    Monitor(cNorth : Colour,cEast : Colour,cSouth : Colour,cWest : Colour) =
            (cNorth in {green,yellow} && cWest in {green,yellow} % wenn unsicherer Zustand, dann intersectionUnsafe
            || cNorth in {green,yellow} && cEast in {green,yellow}
            || cSouth in {green,yellow} && cWest in {green,yellow}
            || cSouth in {green,yellow} && cEast in {green,yellow})->intersectionUnsafe(cNorth,cEast,cSouth,cWest)<>

            % wenn der Zustand sicher ist
            sum c:Colour, d:CardinalDirection. recieve(d,next(c)). % Jede Zustands M?glichkeit durchgehen
                (d==north)->Monitor(next(c),cEast,cSouth,cWest)<> % Zustand an den Monitor ?bergeben
                (d==east)->Monitor(cNorth,next(c),cSouth,cWest)<>
                (d==south)->Monitor(cNorth,cEast,next(c),cWest)<>
                (d==west)->Monitor(cNorth,cEast,cSouth,next(c))
    ;


    Intersection =
        %hide({

        %},
        allow({
            colourSeen,
            intersectionUnsafe
        },
        comm({
            show | recieve -> colourSeen % show und recieve gleichzeitig ausf?hren
        },
            TrafficLight(north, nsAxis) || TrafficLight(east, nsAxis) || TrafficLight(south, nsAxis) || TrafficLight(west, nsAxis) || Monitor(red,red,red,red)
        ))%)
    ;


% -----------------------------------------------------------------------------------------------------------------------
init
    Intersection
;