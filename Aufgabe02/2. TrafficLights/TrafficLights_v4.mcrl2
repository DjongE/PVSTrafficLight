%
% TrafficLights.mcrl2
%
% A specification of a set of four traffic lights at an intersection.
%
% Copyright (c) 2019-2021 HS Emden-Leer
% All Rights Reserved.
%
% @version 1.40 - 08 Apr 2021 - GJV - parameterize starting axis in TrafficLight(), renamed Crossing into Intersection
% @version 1.30 - 16 May 2020 - GJV - drops the need for a four-way synchronization, thereby becoming easier to translate into Go
% @version 1.20 - 24 May 2019 - GJV - further optimatization, but no longer 100% equivalent with initial standard solution
% @version 1.10 - 15 May 2019 - GJV - remove debug information and superfluous specs 
% @version 1.00 - 17 Apr 2019 - GJV - initial version 
%

%
% Definition of data types
%

sort
    CardinalDirection = struct north | east | south | west;   % 4 directions
    Axis = struct nsAxis | ewAxis;                            % 2 axes
    
map
    axis: CardinalDirection -> Axis;

eqn
    axis(north) = nsAxis;
    axis(south) = nsAxis;
    axis(east) = ewAxis;
    axis(west) = ewAxis;

sort
    Colour =  struct red | yellow | green;                    % 3 colours

map
    next : Colour -> Colour;

eqn
    next(red) = green;
    next(green) = yellow;
    next(yellow) = red;

map
    next : CardinalDirection -> CardinalDirection;

eqn
    next(north) = east;
    next(east) = south;
    next(south) = west;
    next(west) = north;



% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a TrafficLight
%

act
    show : CardinalDirection # Colour;  % the given traffic light shows the given colour
    wasShown : Axis;
proc
    TrafficLight(d : CardinalDirection, startAxis : Axis) =
        % auf Startrichtung pruefen
        (axis(d) == startAxis) -> TrafficLight(d, red) <> waitDirection(d) . TrafficLight(d, red)
    ;

    TrafficLight(d : CardinalDirection, c : Colour) =
        % show(d,c): den aktuellen Zustand anzeigen
        % wasShown(axis(d)): auf die gegenueberliegende Ampel warten
        % (c==red): wenn Ampel rot
        % NextDirection(d): Richtungswechsel
        % waitDirection(d): auf Richtungswechsel warten
        % NextColour(d,c): Ampel auf die naechste Farbe schalten
        show(d, c) . wasShown(axis(d)) . (c == red) -> nextDirection(next(d)) . waitDirection(d) . TrafficLight(d, next(c)) <> TrafficLight(d, next(c))
    ;


% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a intersection with four traffic lights
%

act
    nextDirection : CardinalDirection;
    waitDirection : CardinalDirection;
    axisWasShown : Axis;
    changedDirection : CardinalDirection;

proc
    Intersection =
        hide({
            axisWasShown,
            changedDirection
        },
        allow({
            show,
            axisWasShown,
            changedDirection
        },
        comm({
            waitDirection | nextDirection -> changedDirection,
            wasShown | wasShown -> axisWasShown
        },
            TrafficLight(north, nsAxis) || TrafficLight(east, nsAxis) || TrafficLight(south, nsAxis) || TrafficLight(west, nsAxis)
        )))
    ;


% -----------------------------------------------------------------------------------------------------------------------
init
    Intersection
;